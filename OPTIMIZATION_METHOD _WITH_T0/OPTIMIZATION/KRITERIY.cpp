#include "stdafx.h"

// Целевая функция
double FCT(double K[])
{
	// число параметров состояния
	int N;
	// временные переменные
	double TF,DT,TIME,T0;
	// ограничения на выходной сигнал
	double YDES, YMAX, DYMAX;
	// критерий оптимизации
	double J; 
	// объявление вектора состояния X(N)
	double X[4]={0.0}; 
	// объявление вектора состояния X(N)
	double DX[4]={0.0}; 
	// объявление сигнала управления
	double U[1]={0.0};
	double U0[1]={0.0};
	// инициализация начального состояния системы
	X[0]=0.0;
	//X[1]=10.0;				// высота
	X[3]=1.0*3.14/180;		    // угол
	X[2]=0.0;
	X[1]=0.0;
	// инициализация управления
	U0[0]=0.0;
	U[0]=U0[0];
	// заданные параметры
	N=4;
	TF=10.0;
	DT=0.001;
	TIME=0.0;
	YDES=0.0;
	YMAX=5.0;
	// DYMAX=5.E00;               // вертикальная скорость
	DYMAX=10.E00*3.14/180;        // угловая скорость
	J=0.0;
	
	// текущее значение искомых переменных
	T0=K[0];
	kP=K[1];
	kI=K[2];
	kD=K[3];

	// цикл моделирования
	do
	{
		// интегрирование (1 шаг)
		RKS(N,DT,TIME,DX,X,U,FX);
		// сигналы управления
		CONTROL(X,U,U0);
		// критерий оптимизации
		/*if (fabs(X[2])>DYMAX)
			J=J+1.E+6*pow(X[2]/DYMAX,2.0);*/
		if (TIME>T0)
			J=J+50*pow(X[3]-YDES,2.0); //+ 2.E+2*pow(X[2],2.0);
		if (J!=J)
			J=1.E+9;
	}while (TIME<TF);
	J=J+1.0*T0*T0;
//	static int count=0;
//	if (count==0)
	printf("T0=%f kP= %f kI=%f kD=%f U=%f F=%f\n",T0,kP,kI,kD,X[1],J);
//	count=1;
	// возврат значения критерия
	return J;
}